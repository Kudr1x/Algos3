package AES

import (
	"bytes"
	"crypto/rand"
	"errors"
)

const (
	// BlockSize in bytes
	BlockSize = 16

	// KeySize for AES-128
	KeySize = 16
)

var rcon = [11]byte{
	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
}

var sbox = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

var invSbox = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

// addRoundKey adds the round key to the state
func addRoundKey(state, roundKey []byte) {
	//if len(state) != BlockSize || len(roundKey) != BlockSize {
	//	panic("state or roundKey length is not equal to BlockSize")
	//}
	for i := 0; i < BlockSize; i++ {
		state[i] ^= roundKey[i]
	}
}

// subBytes substitutes bytes in the state using the S-box
func subBytes(state []byte) {
	for i := 0; i < BlockSize; i++ {
		state[i] = sbox[state[i]]
	}
}

// invSubBytes substitutes bytes in the state using the inverse S-box
func invSubBytes(state []byte) {
	for i := 0; i < BlockSize; i++ {
		state[i] = invSbox[state[i]]
	}
}

// shiftRows shifts the rows in the state
func shiftRows(state []byte) {
	// Row 0 remains unchanged

	// Row 1: shift left by 1
	state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]

	// Row 2: shift left by 2
	state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]

	// Row 3: shift left by 3
	state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
}

func invShiftRows(state []byte) {
	// Row 0 remains unchanged

	// Row 1: shift right by 1
	state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]

	// Row 2: shift right by 2
	state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]

	// Row 3: shift right by 3
	state[3], state[7], state[11], state[15] = state[7], state[11], state[15], state[3]
}

// mixColumns mixes the columns in the state
func mixColumns(state []byte) {
	for i := 0; i < 4; i++ {
		a := state[i*4]
		b := state[i*4+1]
		c := state[i*4+2]
		d := state[i*4+3]

		state[i*4] = mul2(a) ^ mul3(b) ^ c ^ d
		state[i*4+1] = a ^ mul2(b) ^ mul3(c) ^ d
		state[i*4+2] = a ^ b ^ mul2(c) ^ mul3(d)
		state[i*4+3] = mul3(a) ^ b ^ c ^ mul2(d)
	}
}

// keyExpansion expands the key into round keys
func keyExpansion(key []byte) [][]byte {
	if len(key) != KeySize {
		return nil
	}

	Nk := KeySize / 4
	Nb := 4
	Nr := 10
	expandedKey := make([][]byte, Nb*(Nr+1))
	for i := range expandedKey {
		expandedKey[i] = make([]byte, 4)
	}

	for i := 0; i < Nk; i++ {
		expandedKey[i][0] = key[4*i]
		expandedKey[i][1] = key[4*i+1]
		expandedKey[i][2] = key[4*i+2]
		expandedKey[i][3] = key[4*i+3]
	}

	temp := make([]byte, 4)

	for i := Nk; i < Nb*(Nr+1); i++ {
		copy(temp, expandedKey[i-1])
		if i%Nk == 0 {
			temp[0], temp[1], temp[2], temp[3] = temp[1], temp[2], temp[3], temp[0]
			for j := 0; j < 4; j++ {
				temp[j] = sbox[temp[j]]
			}
			temp[0] ^= rcon[i/Nk]
		}
		for j := 0; j < 4; j++ {
			expandedKey[i][j] = expandedKey[i-Nk][j] ^ temp[j]
		}
	}

	// Flatten the expanded key to a single slice of bytes
	flatExpandedKey := make([]byte, 4*Nb*(Nr+1))
	for i := 0; i < Nb*(Nr+1); i++ {
		copy(flatExpandedKey[i*4:], expandedKey[i])
	}

	// Split the flat expanded key into round keys
	roundKeys := make([][]byte, Nr+1)
	for i := 0; i <= Nr; i++ {
		roundKeys[i] = flatExpandedKey[i*BlockSize : (i+1)*BlockSize]
	}

	return roundKeys
}

// EncryptBlock encrypts a single block using the AES algorithm
func EncryptBlock(plaintext, key []byte) ([]byte, error) {
	if len(plaintext) != BlockSize {
		return nil, errors.New("plaintext must be 16 bytes")
	}
	if len(key) != KeySize {
		return nil, errors.New("key must be 16 bytes")
	}

	state := make([]byte, BlockSize)
	copy(state, plaintext)

	roundKeys := keyExpansion(key)
	if roundKeys == nil {
		return nil, errors.New("key expansion failed")
	}

	addRoundKey(state, roundKeys[0])

	for round := 1; round < 10; round++ {
		subBytes(state)
		shiftRows(state)
		mixColumns(state)
		addRoundKey(state, roundKeys[round])
	}

	subBytes(state)
	shiftRows(state)
	addRoundKey(state, roundKeys[10])

	return state, nil
}

// DecryptBlock decrypts a single block using the AES algorithm
func DecryptBlock(ciphertext, key []byte) ([]byte, error) {
	if len(ciphertext) != BlockSize {
		return nil, errors.New("ciphertext must be 16 bytes")
	}
	if len(key) != KeySize {
		return nil, errors.New("key must be 16 bytes")
	}

	state := make([]byte, BlockSize)
	copy(state, ciphertext)

	roundKeys := keyExpansion(key)

	addRoundKey(state, roundKeys[10])

	for round := 9; round > 0; round-- {
		invShiftRows(state)
		invSubBytes(state)
		addRoundKey(state, roundKeys[round])
		invMixColumns(state)
	}

	// Final round inverse operations
	invShiftRows(state)
	invSubBytes(state)
	addRoundKey(state, roundKeys[0])

	return state, nil
}

// GenerateRandomKey generates a random AES key
func GenerateRandomKey() ([]byte, error) {
	key := make([]byte, KeySize)
	_, err := rand.Read(key)
	if err != nil {
		return nil, err
	}
	return key, nil
}

func Encrypt(plaintext, key []byte) ([]byte, error) {
	if len(key) != KeySize {
		return nil, errors.New("key must be 16 bytes")
	}

	plaintext = pad(plaintext, BlockSize)
	ciphertext := make([]byte, len(plaintext))

	for i := 0; i < len(plaintext); i += BlockSize {
		block, err := EncryptBlock(plaintext[i:i+BlockSize], key)
		if err != nil {
			return nil, err
		}
		copy(ciphertext[i:], block)
	}

	return ciphertext, nil
}

func Decrypt(ciphertext, key []byte) ([]byte, error) {
	if len(key) != KeySize {
		return nil, errors.New("key must be 16 bytes")
	}

	if len(ciphertext)%BlockSize != 0 {
		return nil, errors.New("ciphertext is not a multiple of the block size")
	}

	plaintext := make([]byte, len(ciphertext))

	for i := 0; i < len(ciphertext); i += BlockSize {
		block, err := DecryptBlock(ciphertext[i:i+BlockSize], key)
		if err != nil {
			return nil, err
		}
		copy(plaintext[i:], block)
	}

	return unpad(plaintext)
}

func invMixColumns(state []byte) {
	for i := 0; i < 4; i++ {
		a := state[i*4]
		b := state[i*4+1]
		c := state[i*4+2]
		d := state[i*4+3]

		state[i*4] = mul14(a) ^ mul11(b) ^ mul13(c) ^ mul9(d)
		state[i*4+1] = mul9(a) ^ mul14(b) ^ mul11(c) ^ mul13(d)
		state[i*4+2] = mul13(a) ^ mul9(b) ^ mul14(c) ^ mul11(d)
		state[i*4+3] = mul11(a) ^ mul13(b) ^ mul9(c) ^ mul14(d)
	}
}

func mul2(x byte) byte {
	if x&0x80 != 0 {
		return (x << 1) ^ 0x1b
	}
	return x << 1
}

func mul3(x byte) byte {
	return mul2(x) ^ x
}

func mul9(x byte) byte {
	return mul2(mul2(mul2(x))) ^ x
}

func mul11(x byte) byte {
	return mul2(mul2(mul2(x))) ^ mul2(x) ^ x
}

func mul13(x byte) byte {
	return mul2(mul2(mul2(x))) ^ mul2(mul2(x)) ^ x
}

func mul14(x byte) byte {
	return mul2(mul2(mul2(x))) ^ mul2(mul2(x)) ^ mul2(x)
}

func pad(src []byte, blockSize int) []byte {
	padding := blockSize - len(src)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(src, padtext...)
}

func unpad(src []byte) ([]byte, error) {
	length := len(src)
	if length == 0 {
		return nil, errors.New("unpad: input is empty")
	}
	padding := int(src[length-1])
	if padding > BlockSize || padding == 0 {
		return nil, errors.New("unpad: invalid padding")
	}
	for i := 0; i < padding; i++ {
		if src[length-1-i] != byte(padding) {
			return nil, errors.New("unpad: invalid padding")
		}
	}
	return src[:length-padding], nil
}
